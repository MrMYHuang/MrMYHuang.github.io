{"version":3,"sources":["../node_modules/workbox-core/_version.js","../node_modules/workbox-core/models/messages/messageGenerator.js","../node_modules/workbox-core/_private/WorkboxError.js","../node_modules/workbox-core/models/quotaErrorCallbacks.js","../node_modules/workbox-core/registerQuotaErrorCallback.js","../node_modules/workbox-core/_private/cacheNames.js","../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../node_modules/workbox-core/_private/getFriendlyURL.js","../node_modules/workbox-core/utils/pluginUtils.js","../node_modules/workbox-core/_private/cacheWrapper.js","../node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../node_modules/workbox-core/_private/dontWaitFor.js","../node_modules/workbox-core/_private/DBWrapper.js","../node_modules/workbox-core/_private/deleteDatabase.js","../node_modules/workbox-core/_private/fetchWrapper.js","../node_modules/workbox-core/copyResponse.js","../node_modules/workbox-core/clientsClaim.js","../node_modules/workbox-expiration/_version.js","../node_modules/workbox-expiration/models/CacheTimestampsModel.js","../node_modules/workbox-expiration/CacheExpiration.js","../node_modules/workbox-expiration/ExpirationPlugin.js","../node_modules/workbox-precaching/_version.js","../node_modules/workbox-precaching/utils/precachePlugins.js","../node_modules/workbox-precaching/utils/createCacheKey.js","../node_modules/workbox-precaching/PrecacheController.js","../node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../node_modules/workbox-precaching/utils/generateURLVariations.js","../node_modules/workbox-precaching/utils/getCacheKeyForURL.js","../node_modules/workbox-precaching/utils/addFetchListener.js","../node_modules/workbox-precaching/addRoute.js","../node_modules/workbox-precaching/createHandlerBoundToURL.js","../node_modules/workbox-precaching/precache.js","../node_modules/workbox-precaching/precacheAndRoute.js","../node_modules/workbox-routing/_version.js","../node_modules/workbox-routing/utils/constants.js","../node_modules/workbox-routing/utils/normalizeHandler.js","../node_modules/workbox-routing/Route.js","../node_modules/workbox-routing/RegExpRoute.js","../node_modules/workbox-routing/Router.js","../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../node_modules/workbox-routing/registerRoute.js","../node_modules/workbox-strategies/_version.js","../node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","../node_modules/workbox-strategies/StaleWhileRevalidate.js","../src/Constants.ts","../src/IndexedDbFuncs.ts","../src/service-worker.ts"],"names":["fallback","code","args","msg","messageGenerator","WorkboxError","errorCode","details","message","quotaErrorCallbacks","registerQuotaErrorCallback","callback","_cacheNameDetails","_createCacheName","cacheName","value","eachCacheNameDetail","fn","key","cacheNames","userCacheName","executeQuotaErrorCallbacks","getFriendlyURL","url","pluginUtils","plugins","callbackName","plugin","_getEffectiveRequest","request","mode","cacheKeyWillBeUsedPlugins","effectiveRequest","_isResponseSafeToCache","response","event","responseToCache","pluginsUsed","matchWrapper","matchOptions","cache","cachedResponse","putWrapper","updatePlugins","oldResponse","error","cacheWrapper","supportStatus","canConstructResponseFromBodyStream","testResponse","dontWaitFor","promise","DBWrapper","name","version","onupgradeneeded","onversionchange","resolve","reject","openRequestTimedOut","openRequest","evt","db","storeName","query","count","entry","index","direction","includeKeys","txn","done","store","target","results","cursor","storeNames","type","method","objStore","methodsToWrap","methods","deleteDatabase","wrappedFetch","fetchOptions","possiblePreloadResponse","failedFetchPlugins","originalRequest","pluginMethod","requestClone","err","pluginFilteredRequest","fetchResponse","fetchWrapper","copyResponse","modifier","clonedResponse","responseInit","modifiedResponseInit","body","clientsClaim","DB_NAME","OBJECT_STORE_NAME","normalizeURL","unNormalizedUrl","CacheTimestampsModel","timestamp","minTimestamp","maxCount","entriesToDelete","entriesNotDeletedCount","result","urlsDeleted","CacheExpiration","config","urlsExpired","expireOlderThan","ExpirationPlugin","isFresh","cacheExpiration","updateTimestampDone","dateHeaderTimestamp","now","dateHeader","headerTime","precachePlugins","newPlugins","REVISION_SEARCH_PARAM","createCacheKey","urlObject","revision","cacheKeyURL","originalURL","PrecacheController","entries","urlsToWarnAbout","cacheKey","cacheMode","warningMessage","toBePrecached","alreadyPrecached","alreadyCachedRequests","existingCacheKeys","precacheRequests","integrity","item","currentlyCachedRequests","expectedCacheKeys","deletedURLs","cacheWillUpdatePlugin","fallbackToNetwork","handler","precacheController","getOrCreatePrecacheController","removeIgnoredSearchParams","ignoreURLParametersMatching","paramName","regExp","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","urlWithoutIgnoredParams","directoryURL","cleanURL","additionalURLs","urlToAttempt","getCacheKeyForURL","options","urlsToCacheKeys","possibleURL","possibleCacheKey","addFetchListener","precachedURL","responsePromise","listenerAdded","addRoute","createHandlerBoundToURL","installListener","activateListener","precache","precacheAndRoute","defaultMethod","normalizeHandler","Route","match","RegExpRoute","Router","payload","requestPromises","params","route","routes","matchResult","routeIndex","defaultRouter","getOrCreateDefaultRouter","registerRoute","capture","captureUrl","matchCallback","cacheOkAndOpaquePlugin","StaleWhileRevalidate","isUsingCacheWillUpdate","fetchAndCachePromise","cachePutPromise","Constants","cbetardb","dataStore","twKaiFontVersion","fontStore","dbOpenReq","dbIsReady","ready","ok","timer","open","fail","ev","objectStore","i","s","clear","clearStore","reqWrite","_ev","saveFile","fileName","data","removeFile","checkKey","req","getFile","IndexedDbFuncs","fileExtensionRegexp","virtualHtmls","v","dataIndex","headers","opts","imgData"],"mappings":"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","file":"service-worker.js","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\n    fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport { assert } from './_private/assert.js';\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\nimport './_version.js';\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof module:workbox-core\n */\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(callback, 'function', {\n            moduleName: 'workbox-core',\n            funcName: 'register',\n            paramName: 'callback',\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n}\nexport { registerQuotaErrorCallback };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof module:workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const pluginUtils = {\n    filter: (plugins, callbackName) => {\n        return plugins.filter((plugin) => callbackName in plugin);\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from './assert.js';\nimport { executeQuotaErrorCallbacks } from './executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from './getFriendlyURL.js';\nimport { logger } from './logger.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport { WorkboxError } from './WorkboxError.js';\nimport '../_version.js';\n/**\n * Checks the list of plugins for the cacheKeyWillBeUsed callback, and\n * executes any of those callbacks found in sequence. The final `Request` object\n * returned by the last plugin is treated as the cache key for cache reads\n * and/or writes.\n *\n * @param {Object} options\n * @param {Request} options.request\n * @param {string} options.mode\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Request>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst _getEffectiveRequest = async ({ request, mode, plugins = [], }) => {\n    const cacheKeyWillBeUsedPlugins = pluginUtils.filter(plugins, \"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */);\n    let effectiveRequest = request;\n    for (const plugin of cacheKeyWillBeUsedPlugins) {\n        effectiveRequest = await plugin[\"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */].call(plugin, { mode, request: effectiveRequest });\n        if (typeof effectiveRequest === 'string') {\n            effectiveRequest = new Request(effectiveRequest);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(effectiveRequest, Request, {\n                moduleName: 'Plugin',\n                funcName: \"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */,\n                isReturnValueProblem: true,\n            });\n        }\n    }\n    return effectiveRequest;\n};\n/**\n * This method will call cacheWillUpdate on the available plugins (or use\n * status === 200) to determine if the Response is safe and valid to cache.\n *\n * @param {Object} options\n * @param {Request} options.request\n * @param {Response} options.response\n * @param {Event} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst _isResponseSafeToCache = async ({ request, response, event, plugins = [], }) => {\n    let responseToCache = response;\n    let pluginsUsed = false;\n    for (const plugin of plugins) {\n        if (\"cacheWillUpdate\" /* CACHE_WILL_UPDATE */ in plugin) {\n            pluginsUsed = true;\n            const pluginMethod = plugin[\"cacheWillUpdate\" /* CACHE_WILL_UPDATE */];\n            responseToCache = await pluginMethod.call(plugin, {\n                request,\n                response: responseToCache,\n                event,\n            });\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    assert.isInstance(responseToCache, Response, {\n                        moduleName: 'Plugin',\n                        funcName: \"cacheWillUpdate\" /* CACHE_WILL_UPDATE */,\n                        isReturnValueProblem: true,\n                    });\n                }\n            }\n            if (!responseToCache) {\n                break;\n            }\n        }\n    }\n    if (!pluginsUsed) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (responseToCache) {\n                if (responseToCache.status !== 200) {\n                    if (responseToCache.status === 0) {\n                        logger.warn(`The response for '${request.url}' is an opaque ` +\n                            `response. The caching strategy that you're using will not ` +\n                            `cache opaque responses by default.`);\n                    }\n                    else {\n                        logger.debug(`The response for '${request.url}' returned ` +\n                            `a status code of '${response.status}' and won't be cached as a ` +\n                            `result.`);\n                    }\n                }\n            }\n        }\n        responseToCache = responseToCache && responseToCache.status === 200 ?\n            responseToCache : undefined;\n    }\n    return responseToCache ? responseToCache : null;\n};\n/**\n * This is a wrapper around cache.match().\n *\n * @param {Object} options\n * @param {string} options.cacheName Name of the cache to match against.\n * @param {Request} options.request The Request that will be used to look up\n *     cache entries.\n * @param {Event} [options.event] The event that prompted the action.\n * @param {Object} [options.matchOptions] Options passed to cache.match().\n * @param {Array<Object>} [options.plugins=[]] Array of plugins.\n * @return {Response} A cached response if available.\n *\n * @private\n * @memberof module:workbox-core\n */\nconst matchWrapper = async ({ cacheName, request, event, matchOptions, plugins = [], }) => {\n    const cache = await self.caches.open(cacheName);\n    const effectiveRequest = await _getEffectiveRequest({\n        plugins, request, mode: 'read'\n    });\n    let cachedResponse = await cache.match(effectiveRequest, matchOptions);\n    if (process.env.NODE_ENV !== 'production') {\n        if (cachedResponse) {\n            logger.debug(`Found a cached response in '${cacheName}'.`);\n        }\n        else {\n            logger.debug(`No cached response found in '${cacheName}'.`);\n        }\n    }\n    for (const plugin of plugins) {\n        if (\"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */ in plugin) {\n            const pluginMethod = plugin[\"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */];\n            cachedResponse = await pluginMethod.call(plugin, {\n                cacheName,\n                event,\n                matchOptions,\n                cachedResponse,\n                request: effectiveRequest,\n            });\n            if (process.env.NODE_ENV !== 'production') {\n                if (cachedResponse) {\n                    assert.isInstance(cachedResponse, Response, {\n                        moduleName: 'Plugin',\n                        funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\n                        isReturnValueProblem: true,\n                    });\n                }\n            }\n        }\n    }\n    return cachedResponse;\n};\n/**\n * Wrapper around cache.put().\n *\n * Will call `cacheDidUpdate` on plugins if the cache was updated, using\n * `matchOptions` when determining what the old entry is.\n *\n * @param {Object} options\n * @param {string} options.cacheName\n * @param {Request} options.request\n * @param {Response} options.response\n * @param {Event} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @param {Object} [options.matchOptions]\n *\n * @private\n * @memberof module:workbox-core\n */\nconst putWrapper = async ({ cacheName, request, response, event, plugins = [], matchOptions, }) => {\n    if (process.env.NODE_ENV !== 'production') {\n        if (request.method && request.method !== 'GET') {\n            throw new WorkboxError('attempt-to-cache-non-get-request', {\n                url: getFriendlyURL(request.url),\n                method: request.method,\n            });\n        }\n    }\n    const effectiveRequest = await _getEffectiveRequest({\n        plugins, request, mode: 'write'\n    });\n    if (!response) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Cannot cache non-existent response for ` +\n                `'${getFriendlyURL(effectiveRequest.url)}'.`);\n        }\n        throw new WorkboxError('cache-put-with-no-response', {\n            url: getFriendlyURL(effectiveRequest.url),\n        });\n    }\n    const responseToCache = await _isResponseSafeToCache({\n        event,\n        plugins,\n        response,\n        request: effectiveRequest,\n    });\n    if (!responseToCache) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' will ` +\n                `not be cached.`, responseToCache);\n        }\n        return;\n    }\n    const cache = await self.caches.open(cacheName);\n    const updatePlugins = pluginUtils.filter(plugins, \"cacheDidUpdate\" /* CACHE_DID_UPDATE */);\n    const oldResponse = updatePlugins.length > 0 ?\n        await matchWrapper({ cacheName, matchOptions, request: effectiveRequest }) :\n        null;\n    if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`Updating the '${cacheName}' cache with a new Response for ` +\n            `${getFriendlyURL(effectiveRequest.url)}.`);\n    }\n    try {\n        await cache.put(effectiveRequest, responseToCache);\n    }\n    catch (error) {\n        // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n        if (error.name === 'QuotaExceededError') {\n            await executeQuotaErrorCallbacks();\n        }\n        throw error;\n    }\n    for (const plugin of updatePlugins) {\n        await plugin[\"cacheDidUpdate\" /* CACHE_DID_UPDATE */].call(plugin, {\n            cacheName,\n            event,\n            oldResponse,\n            newResponse: responseToCache,\n            request: effectiveRequest,\n        });\n    }\n};\nexport const cacheWrapper = {\n    put: putWrapper,\n    match: matchWrapper,\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    promise.then(() => { });\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A class that wraps common IndexedDB functionality in a promise-based API.\n * It exposes all the underlying power and functionality of IndexedDB, but\n * wraps the most commonly used features in a way that's much simpler to use.\n *\n * @private\n */\nexport class DBWrapper {\n    /**\n     * @param {string} name\n     * @param {number} version\n     * @param {Object=} [callback]\n     * @param {!Function} [callbacks.onupgradeneeded]\n     * @param {!Function} [callbacks.onversionchange] Defaults to\n     *     DBWrapper.prototype._onversionchange when not specified.\n     * @private\n     */\n    constructor(name, version, { onupgradeneeded, onversionchange, } = {}) {\n        this._db = null;\n        this._name = name;\n        this._version = version;\n        this._onupgradeneeded = onupgradeneeded;\n        this._onversionchange = onversionchange || (() => this.close());\n    }\n    /**\n     * Returns the IDBDatabase instance (not normally needed).\n     * @return {IDBDatabase|undefined}\n     *\n     * @private\n     */\n    get db() {\n        return this._db;\n    }\n    /**\n     * Opens a connected to an IDBDatabase, invokes any onupgradedneeded\n     * callback, and added an onversionchange callback to the database.\n     *\n     * @return {IDBDatabase}\n     * @private\n     */\n    async open() {\n        if (this._db)\n            return;\n        this._db = await new Promise((resolve, reject) => {\n            // This flag is flipped to true if the timeout callback runs prior\n            // to the request failing or succeeding. Note: we use a timeout instead\n            // of an onblocked handler since there are cases where onblocked will\n            // never never run. A timeout better handles all possible scenarios:\n            // https://github.com/w3c/IndexedDB/issues/223\n            let openRequestTimedOut = false;\n            setTimeout(() => {\n                openRequestTimedOut = true;\n                reject(new Error('The open request was blocked and timed out'));\n            }, this.OPEN_TIMEOUT);\n            const openRequest = indexedDB.open(this._name, this._version);\n            openRequest.onerror = () => reject(openRequest.error);\n            openRequest.onupgradeneeded = (evt) => {\n                if (openRequestTimedOut) {\n                    openRequest.transaction.abort();\n                    openRequest.result.close();\n                }\n                else if (typeof this._onupgradeneeded === 'function') {\n                    this._onupgradeneeded(evt);\n                }\n            };\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                if (openRequestTimedOut) {\n                    db.close();\n                }\n                else {\n                    db.onversionchange = this._onversionchange.bind(this);\n                    resolve(db);\n                }\n            };\n        });\n        return this;\n    }\n    /**\n     * Polyfills the native `getKey()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @return {Array}\n     * @private\n     */\n    async getKey(storeName, query) {\n        return (await this.getAllKeys(storeName, query, 1))[0];\n    }\n    /**\n     * Polyfills the native `getAll()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @param {number} count\n     * @return {Array}\n     * @private\n     */\n    async getAll(storeName, query, count) {\n        return await this.getAllMatching(storeName, { query, count });\n    }\n    /**\n     * Polyfills the native `getAllKeys()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @param {number} count\n     * @return {Array}\n     * @private\n     */\n    async getAllKeys(storeName, query, count) {\n        const entries = await this.getAllMatching(storeName, { query, count, includeKeys: true });\n        return entries.map((entry) => entry.key);\n    }\n    /**\n     * Supports flexible lookup in an object store by specifying an index,\n     * query, direction, and count. This method returns an array of objects\n     * with the signature .\n     *\n     * @param {string} storeName\n     * @param {Object} [opts]\n     * @param {string} [opts.index] The index to use (if specified).\n     * @param {*} [opts.query]\n     * @param {IDBCursorDirection} [opts.direction]\n     * @param {number} [opts.count] The max number of results to return.\n     * @param {boolean} [opts.includeKeys] When true, the structure of the\n     *     returned objects is changed from an array of values to an array of\n     *     objects in the form {key, primaryKey, value}.\n     * @return {Array}\n     * @private\n     */\n    async getAllMatching(storeName, { index, query = null, // IE/Edge errors if query === `undefined`.\n    direction = 'next', count, includeKeys = false, } = {}) {\n        return await this.transaction([storeName], 'readonly', (txn, done) => {\n            const store = txn.objectStore(storeName);\n            const target = index ? store.index(index) : store;\n            const results = [];\n            const request = target.openCursor(query, direction);\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (cursor) {\n                    results.push(includeKeys ? cursor : cursor.value);\n                    if (count && results.length >= count) {\n                        done(results);\n                    }\n                    else {\n                        cursor.continue();\n                    }\n                }\n                else {\n                    done(results);\n                }\n            };\n        });\n    }\n    /**\n     * Accepts a list of stores, a transaction type, and a callback and\n     * performs a transaction. A promise is returned that resolves to whatever\n     * value the callback chooses. The callback holds all the transaction logic\n     * and is invoked with two arguments:\n     *   1. The IDBTransaction object\n     *   2. A `done` function, that's used to resolve the promise when\n     *      when the transaction is done, if passed a value, the promise is\n     *      resolved to that value.\n     *\n     * @param {Array<string>} storeNames An array of object store names\n     *     involved in the transaction.\n     * @param {string} type Can be `readonly` or `readwrite`.\n     * @param {!Function} callback\n     * @return {*} The result of the transaction ran by the callback.\n     * @private\n     */\n    async transaction(storeNames, type, callback) {\n        await this.open();\n        return await new Promise((resolve, reject) => {\n            const txn = this._db.transaction(storeNames, type);\n            txn.onabort = () => reject(txn.error);\n            txn.oncomplete = () => resolve();\n            callback(txn, (value) => resolve(value));\n        });\n    }\n    /**\n     * Delegates async to a native IDBObjectStore method.\n     *\n     * @param {string} method The method name.\n     * @param {string} storeName The object store name.\n     * @param {string} type Can be `readonly` or `readwrite`.\n     * @param {...*} args The list of args to pass to the native method.\n     * @return {*} The result of the transaction.\n     * @private\n     */\n    async _call(method, storeName, type, ...args) {\n        const callback = (txn, done) => {\n            const objStore = txn.objectStore(storeName);\n            // TODO(philipwalton): Fix this underlying TS2684 error.\n            // @ts-ignore\n            const request = objStore[method].apply(objStore, args);\n            request.onsuccess = () => done(request.result);\n        };\n        return await this.transaction([storeName], type, callback);\n    }\n    /**\n     * Closes the connection opened by `DBWrapper.open()`. Generally this method\n     * doesn't need to be called since:\n     *   1. It's usually better to keep a connection open since opening\n     *      a new connection is somewhat slow.\n     *   2. Connections are automatically closed when the reference is\n     *      garbage collected.\n     * The primary use case for needing to close a connection is when another\n     * reference (typically in another tab) needs to upgrade it and would be\n     * blocked by the current, open connection.\n     *\n     * @private\n     */\n    close() {\n        if (this._db) {\n            this._db.close();\n            this._db = null;\n        }\n    }\n}\n// Exposed on the prototype to let users modify the default timeout on a\n// per-instance or global basis.\nDBWrapper.prototype.OPEN_TIMEOUT = 2000;\n// Wrap native IDBObjectStore methods according to their mode.\nconst methodsToWrap = {\n    readonly: ['get', 'count', 'getKey', 'getAll', 'getAllKeys'],\n    readwrite: ['add', 'put', 'clear', 'delete'],\n};\nfor (const [mode, methods] of Object.entries(methodsToWrap)) {\n    for (const method of methods) {\n        if (method in IDBObjectStore.prototype) {\n            // Don't use arrow functions here since we're outside of the class.\n            DBWrapper.prototype[method] =\n                async function (storeName, ...args) {\n                    return await this._call(method, storeName, mode, ...args);\n                };\n        }\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Deletes the database.\n * Note: this is exported separately from the DBWrapper module because most\n * usages of IndexedDB in workbox dont need deleting, and this way it can be\n * reused in tests to delete databases without creating DBWrapper instances.\n *\n * @param {string} name The database name.\n * @private\n */\nexport const deleteDatabase = async (name) => {\n    await new Promise((resolve, reject) => {\n        const request = indexedDB.deleteDatabase(name);\n        request.onerror = () => {\n            reject(request.error);\n        };\n        request.onblocked = () => {\n            reject(new Error('Delete blocked'));\n        };\n        request.onsuccess = () => {\n            resolve();\n        };\n    });\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from './WorkboxError.js';\nimport { logger } from './logger.js';\nimport { assert } from './assert.js';\nimport { getFriendlyURL } from '../_private/getFriendlyURL.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport '../_version.js';\n/**\n * Wrapper around the fetch API.\n *\n * Will call requestWillFetch on available plugins.\n *\n * @param {Object} options\n * @param {Request|string} options.request\n * @param {Object} [options.fetchOptions]\n * @param {ExtendableEvent} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst wrappedFetch = async ({ request, fetchOptions, event, plugins = [], }) => {\n    if (typeof request === 'string') {\n        request = new Request(request);\n    }\n    // We *should* be able to call `await event.preloadResponse` even if it's\n    // undefined, but for some reason, doing so leads to errors in our Node unit\n    // tests. To work around that, explicitly check preloadResponse's value first.\n    if (event instanceof FetchEvent && event.preloadResponse) {\n        const possiblePreloadResponse = await event.preloadResponse;\n        if (possiblePreloadResponse) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Using a preloaded navigation response for ` +\n                    `'${getFriendlyURL(request.url)}'`);\n            }\n            return possiblePreloadResponse;\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isInstance(request, Request, {\n            paramName: 'request',\n            expectedClass: Request,\n            moduleName: 'workbox-core',\n            className: 'fetchWrapper',\n            funcName: 'wrappedFetch',\n        });\n    }\n    const failedFetchPlugins = pluginUtils.filter(plugins, \"fetchDidFail\" /* FETCH_DID_FAIL */);\n    // If there is a fetchDidFail plugin, we need to save a clone of the\n    // original request before it's either modified by a requestWillFetch\n    // plugin or before the original request's body is consumed via fetch().\n    const originalRequest = failedFetchPlugins.length > 0 ?\n        request.clone() : null;\n    try {\n        for (const plugin of plugins) {\n            if (\"requestWillFetch\" /* REQUEST_WILL_FETCH */ in plugin) {\n                const pluginMethod = plugin[\"requestWillFetch\" /* REQUEST_WILL_FETCH */];\n                const requestClone = request.clone();\n                request = await pluginMethod.call(plugin, {\n                    request: requestClone,\n                    event,\n                });\n                if (process.env.NODE_ENV !== 'production') {\n                    if (request) {\n                        assert.isInstance(request, Request, {\n                            moduleName: 'Plugin',\n                            funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\n                            isReturnValueProblem: true,\n                        });\n                    }\n                }\n            }\n        }\n    }\n    catch (err) {\n        throw new WorkboxError('plugin-error-request-will-fetch', {\n            thrownError: err,\n        });\n    }\n    // The request can be altered by plugins with `requestWillFetch` making\n    // the original request (Most likely from a `fetch` event) to be different\n    // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\n    const pluginFilteredRequest = request.clone();\n    try {\n        let fetchResponse;\n        // See https://github.com/GoogleChrome/workbox/issues/1796\n        if (request.mode === 'navigate') {\n            fetchResponse = await fetch(request);\n        }\n        else {\n            fetchResponse = await fetch(request, fetchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Network request for ` +\n                `'${getFriendlyURL(request.url)}' returned a response with ` +\n                `status '${fetchResponse.status}'.`);\n        }\n        for (const plugin of plugins) {\n            if (\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */ in plugin) {\n                fetchResponse = await plugin[\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */]\n                    .call(plugin, {\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n                if (process.env.NODE_ENV !== 'production') {\n                    if (fetchResponse) {\n                        assert.isInstance(fetchResponse, Response, {\n                            moduleName: 'Plugin',\n                            funcName: \"fetchDidSucceed\" /* FETCH_DID_SUCCEED */,\n                            isReturnValueProblem: true,\n                        });\n                    }\n                }\n            }\n        }\n        return fetchResponse;\n    }\n    catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Network request for ` +\n                `'${getFriendlyURL(request.url)}' threw an error.`, error);\n        }\n        for (const plugin of failedFetchPlugins) {\n            await plugin[\"fetchDidFail\" /* FETCH_DID_FAIL */].call(plugin, {\n                error,\n                event,\n                originalRequest: originalRequest.clone(),\n                request: pluginFilteredRequest.clone(),\n            });\n        }\n        throw error;\n    }\n};\nconst fetchWrapper = {\n    fetch: wrappedFetch,\n};\nexport { fetchWrapper };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof module:workbox-core\n */\nasync function copyResponse(response, modifier) {\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream() ?\n        clonedResponse.body : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof module:workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst OBJECT_STORE_NAME = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._cacheName = cacheName;\n        this._db = new DBWrapper(DB_NAME, 1, {\n            onupgradeneeded: (event) => this._handleUpgrade(event),\n        });\n    }\n    /**\n     * Should perform an upgrade of indexedDB.\n     *\n     * @param {Event} event\n     *\n     * @private\n     */\n    _handleUpgrade(event) {\n        const db = event.target.result;\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n        // Previous versions of `workbox-expiration` used `this._cacheName`\n        // as the IDBDatabase name.\n        deleteDatabase(this._cacheName);\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        await this._db.put(OBJECT_STORE_NAME, entry);\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const entry = await this._db.get(OBJECT_STORE_NAME, this._getId(url));\n        return entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const entriesToDelete = await this._db.transaction(OBJECT_STORE_NAME, 'readwrite', (txn, done) => {\n            const store = txn.objectStore(OBJECT_STORE_NAME);\n            const request = store.index('timestamp').openCursor(null, 'prev');\n            const entriesToDelete = [];\n            let entriesNotDeletedCount = 0;\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (cursor) {\n                    const result = cursor.value;\n                    // TODO(philipwalton): once we can use a multi-key index, we\n                    // won't have to check `cacheName` here.\n                    if (result.cacheName === this._cacheName) {\n                        // Delete an entry if it's older than the max age or\n                        // if we already have the max number allowed.\n                        if ((minTimestamp && result.timestamp < minTimestamp) ||\n                            (maxCount && entriesNotDeletedCount >= maxCount)) {\n                            // TODO(philipwalton): we should be able to delete the\n                            // entry right here, but doing so causes an iteration\n                            // bug in Safari stable (fixed in TP). Instead we can\n                            // store the keys of the entries to delete, and then\n                            // delete the separate transactions.\n                            // https://github.com/GoogleChrome/workbox/issues/1978\n                            // cursor.delete();\n                            // We only need to return the URL, not the whole entry.\n                            entriesToDelete.push(cursor.value);\n                        }\n                        else {\n                            entriesNotDeletedCount++;\n                        }\n                    }\n                    cursor.continue();\n                }\n                else {\n                    done(entriesToDelete);\n                }\n            };\n        });\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await this._db.delete(OBJECT_STORE_NAME, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n}\nexport { CacheTimestampsModel };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof module:workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n                // TODO: Assert is positive\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n                // TODO: Assert is positive\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds ?\n            Date.now() - (this._maxAgeSeconds * 1000) : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ?\n                    'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - (this._maxAgeSeconds * 1000);\n            return (timestamp < expireOlderThan);\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in the Workbox APIs to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * Whenever a cached request is used or updated, this plugin will look\n * at the used Cache and remove any old or extra requests.\n *\n * When using `maxAgeSeconds`, requests may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached request has been used. If the request has a \"Date\" header, then\n * a light weight expiration check is performed and the request will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof module:workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - (this._maxAgeSeconds * 1000);\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst plugins = [];\nexport const precachePlugins = {\n    /*\n     * @return {Array}\n     * @private\n     */\n    get() {\n        return plugins;\n    },\n    /*\n     * @param {Array} newPlugins\n     * @private\n     */\n    add(newPlugins) {\n        plugins.push(...newPlugins);\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof module:workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {string} [cacheName] An optional name for the cache, to override\n     * the default precache name.\n     */\n    constructor(cacheName) {\n        this._cacheName = cacheNames.getPrecacheName(cacheName);\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {\n     * Array<module:workbox-precaching.PrecacheController.PrecacheEntry|string>\n     * } entries Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = (typeof entry !== 'string' && entry.revision) ?\n                'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * @param {Object} options\n     * @param {Event} [options.event] The install event (if needed).\n     * @param {Array<Object>} [options.plugins] Plugins to be used for fetching\n     * and caching during install.\n     * @return {Promise<module:workbox-precaching.InstallResult>}\n     */\n    async install({ event, plugins } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (plugins) {\n                assert.isArray(plugins, {\n                    moduleName: 'workbox-precaching',\n                    className: 'PrecacheController',\n                    funcName: 'install',\n                    paramName: 'plugins',\n                });\n            }\n        }\n        const toBePrecached = [];\n        const alreadyPrecached = [];\n        const cache = await self.caches.open(this._cacheName);\n        const alreadyCachedRequests = await cache.keys();\n        const existingCacheKeys = new Set(alreadyCachedRequests.map((request) => request.url));\n        for (const [url, cacheKey] of this._urlsToCacheKeys) {\n            if (existingCacheKeys.has(cacheKey)) {\n                alreadyPrecached.push(url);\n            }\n            else {\n                toBePrecached.push({ cacheKey, url });\n            }\n        }\n        const precacheRequests = toBePrecached.map(({ cacheKey, url }) => {\n            const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n            const cacheMode = this._urlsToCacheModes.get(url);\n            return this._addURLToCache({\n                cacheKey,\n                cacheMode,\n                event,\n                integrity,\n                plugins,\n                url,\n            });\n        });\n        await Promise.all(precacheRequests);\n        const updatedURLs = toBePrecached.map((item) => item.url);\n        if (process.env.NODE_ENV !== 'production') {\n            printInstallDetails(updatedURLs, alreadyPrecached);\n        }\n        return {\n            updatedURLs,\n            notUpdatedURLs: alreadyPrecached,\n        };\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * @return {Promise<module:workbox-precaching.CleanupResult>}\n     */\n    async activate() {\n        const cache = await self.caches.open(this._cacheName);\n        const currentlyCachedRequests = await cache.keys();\n        const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n        const deletedURLs = [];\n        for (const request of currentlyCachedRequests) {\n            if (!expectedCacheKeys.has(request.url)) {\n                await cache.delete(request);\n                deletedURLs.push(request.url);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            printCleanupDetails(deletedURLs);\n        }\n        return { deletedURLs };\n    }\n    /**\n     * Requests the entry and saves it to the cache if the response is valid.\n     * By default, any response with a status code of less than 400 (including\n     * opaque responses) is considered valid.\n     *\n     * If you need to use custom criteria to determine what's valid and what\n     * isn't, then pass in an item in `options.plugins` that implements the\n     * `cacheWillUpdate()` lifecycle event.\n     *\n     * @private\n     * @param {Object} options\n     * @param {string} options.cacheKey The string to use a cache key.\n     * @param {string} options.url The URL to fetch and cache.\n     * @param {string} [options.cacheMode] The cache mode for the network request.\n     * @param {Event} [options.event] The install event (if passed).\n     * @param {Array<Object>} [options.plugins] An array of plugins to apply to\n     * fetch and caching.\n     * @param {string} [options.integrity] The value to use for the `integrity`\n     * field when making the request.\n     */\n    async _addURLToCache({ cacheKey, url, cacheMode, event, plugins, integrity }) {\n        const request = new Request(url, {\n            integrity,\n            cache: cacheMode,\n            credentials: 'same-origin',\n        });\n        let response = await fetchWrapper.fetch({\n            event,\n            plugins,\n            request,\n        });\n        // Allow developers to override the default logic about what is and isn't\n        // valid by passing in a plugin implementing cacheWillUpdate(), e.g.\n        // a `CacheableResponsePlugin` instance.\n        let cacheWillUpdatePlugin;\n        for (const plugin of (plugins || [])) {\n            if ('cacheWillUpdate' in plugin) {\n                cacheWillUpdatePlugin = plugin;\n            }\n        }\n        const isValidResponse = cacheWillUpdatePlugin ?\n            // Use a callback if provided. It returns a truthy value if valid.\n            // NOTE: invoke the method on the plugin instance so the `this` context\n            // is correct.\n            await cacheWillUpdatePlugin.cacheWillUpdate({ event, request, response }) :\n            // Otherwise, default to considering any response status under 400 valid.\n            // This includes, by default, considering opaque responses valid.\n            response.status < 400;\n        // Consider this a failure, leading to the `install` handler failing, if\n        // we get back an invalid response.\n        if (!isValidResponse) {\n            throw new WorkboxError('bad-precaching-response', {\n                url,\n                status: response.status,\n            });\n        }\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        if (response.redirected) {\n            response = await copyResponse(response);\n        }\n        await cacheWrapper.put({\n            event,\n            plugins,\n            response,\n            // `request` already uses `url`. We may be able to reuse it.\n            request: cacheKey === url ? request : new Request(cacheKey),\n            cacheName: this._cacheName,\n            matchOptions: {\n                ignoreSearch: true,\n            },\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * This acts as a drop-in replacement for [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this._cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that can be used within a\n     * {@link module:workbox-routing.Route} that will find a response for the\n     * incoming request against the precache.\n     *\n     * If for an unexpected reason there is a cache miss for the request,\n     * this will fall back to retrieving the `Response` via `fetch()` when\n     * `fallbackToNetwork` is `true`.\n     *\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n     * response from the network if there's a precache miss.\n     * @return {module:workbox-routing~handlerCallback}\n     */\n    createHandler(fallbackToNetwork = true) {\n        return async ({ request }) => {\n            try {\n                const response = await this.matchPrecache(request);\n                if (response) {\n                    return response;\n                }\n                // This shouldn't normally happen, but there are edge cases:\n                // https://github.com/GoogleChrome/workbox/issues/1441\n                throw new WorkboxError('missing-precache-entry', {\n                    cacheName: this._cacheName,\n                    url: request instanceof Request ? request.url : request,\n                });\n            }\n            catch (error) {\n                if (fallbackToNetwork) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.debug(`Unable to respond with precached response. ` +\n                            `Falling back to network.`, error);\n                    }\n                    return fetch(request);\n                }\n                throw error;\n            }\n        };\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * If for an unexpected reason there is a cache miss when looking up `url`,\n     * this will fall back to retrieving the `Response` via `fetch()` when\n     * `fallbackToNetwork` is `true`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n     * response from the network if there's a precache miss.\n     * @return {module:workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url, fallbackToNetwork = true) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        const handler = this.createHandler(fallbackToNetwork);\n        const request = new Request(url);\n        return () => handler({ request });\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching, directoryIndex, cleanURLs, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './getOrCreatePrecacheController.js';\nimport { generateURLVariations } from './generateURLVariations.js';\nimport '../_version.js';\n/**\n * This function will take the request URL and manipulate it based on the\n * configuration options.\n *\n * @param {string} url\n * @param {Object} options\n * @return {string} Returns the URL in the cache that matches the request,\n * if possible.\n *\n * @private\n */\nexport const getCacheKeyForURL = (url, options) => {\n    const precacheController = getOrCreatePrecacheController();\n    const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n    for (const possibleURL of generateURLVariations(url, options)) {\n        const possibleCacheKey = urlsToCacheKeys.get(possibleURL);\n        if (possibleCacheKey) {\n            return possibleCacheKey;\n        }\n    }\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\nimport '../_version.js';\n/**\n * Adds a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * NOTE: when called more than once this method will replace the previously set\n * configuration options. Calling it more than once is not recommended outside\n * of tests.\n *\n * @private\n * @param {Object} [options]\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n * check cache entries for a URLs ending with '/' to see if there is a hit when\n * appending the `directoryIndex` value.\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\n * array of regex's to remove search params when looking for a cache match.\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n * check the cache for the URL with a `.html` added to the end of the end.\n * @param {workbox.precaching~urlManipulation} [options.urlManipulation]\n * This is a function that should take a URL and return an array of\n * alternative URLs that should be checked for precache matches.\n */\nexport const addFetchListener = ({ ignoreURLParametersMatching = [/^utm_/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) => {\n    const cacheName = cacheNames.getPrecacheName();\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('fetch', ((event) => {\n        const precachedURL = getCacheKeyForURL(event.request.url, {\n            cleanURLs,\n            directoryIndex,\n            ignoreURLParametersMatching,\n            urlManipulation,\n        });\n        if (!precachedURL) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` +\n                    getFriendlyURL(event.request.url));\n            }\n            return;\n        }\n        let responsePromise = self.caches.open(cacheName).then((cache) => {\n            return cache.match(precachedURL);\n        }).then((cachedResponse) => {\n            if (cachedResponse) {\n                return cachedResponse;\n            }\n            // Fall back to the network if we don't have a cached response\n            // (perhaps due to manual cache cleanup).\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(precachedURL)} in ${cacheName} was not found. ` +\n                    `Falling back to the network instead.`);\n            }\n            return fetch(precachedURL);\n        });\n        if (process.env.NODE_ENV !== 'production') {\n            responsePromise = responsePromise.then((response) => {\n                // Workbox is going to handle the route.\n                // print the routing details to the console.\n                logger.groupCollapsed(`Precaching is responding to: ` +\n                    getFriendlyURL(event.request.url));\n                logger.log(`Serving the precached url: ${precachedURL}`);\n                logger.groupCollapsed(`View request details here.`);\n                logger.log(event.request);\n                logger.groupEnd();\n                logger.groupCollapsed(`View response details here.`);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n                return response;\n            });\n        }\n        event.respondWith(responsePromise);\n    }));\n};\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addFetchListener } from './utils/addFetchListener.js';\nimport './_version.js';\nlet listenerAdded = false;\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options]\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n * check cache entries for a URLs ending with '/' to see if there is a hit when\n * appending the `directoryIndex` value.\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\n * array of regex's to remove search params when looking for a cache match.\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n * check the cache for the URL with a `.html` added to the end of the end.\n * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]\n * This is a function that should take a URL and return an array of\n * alternative URLs that should be checked for precache matches.\n *\n * @memberof module:workbox-precaching\n */\nfunction addRoute(options) {\n    if (!listenerAdded) {\n        addFetchListener(options);\n        listenerAdded = true;\n    }\n}\nexport { addRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#createHandlerBoundToURL} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call the\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\n * instead of using this function.\n *\n * @param {string} url The precached URL which will be used to lookup the\n * `Response`.\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n * response from the network if there's a precache miss.\n * @return {module:workbox-routing~handlerCallback}\n *\n * @memberof module:workbox-precaching\n */\nfunction createHandlerBoundToURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.createHandlerBoundToURL(url);\n}\nexport { createHandlerBoundToURL };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { precachePlugins } from './utils/precachePlugins.js';\nimport './_version.js';\nconst installListener = (event) => {\n    const precacheController = getOrCreatePrecacheController();\n    const plugins = precachePlugins.get();\n    event.waitUntil(precacheController.install({ event, plugins })\n        .catch((error) => {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Service worker installation failed. It will ` +\n                `be retried automatically during the next navigation.`);\n        }\n        // Re-throw the error to ensure installation fails.\n        throw error;\n    }));\n};\nconst activateListener = (event) => {\n    const precacheController = getOrCreatePrecacheController();\n    event.waitUntil(precacheController.activate());\n};\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof module:workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.addToCacheList(entries);\n    if (entries.length > 0) {\n        // NOTE: these listeners will only be added once (even if the `precache()`\n        // method is called multiple times) because event listeners are implemented\n        // as a set, where each listener must be unique.\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('install', installListener);\n        self.addEventListener('activate', activateListener);\n    }\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * [precache()]{@link module:workbox-precaching.precache} and\n * [addRoute()]{@link module:workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See\n * [addRoute() options]{@link module:workbox-precaching.addRoute}.\n *\n * @memberof module:workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link module:workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp}' only partially matched ` +\n                        `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle (this is usually\n     *     from a fetch event, but it does not have to be).\n     * @param {FetchEvent} [options.event] The event that triggered the request,\n     *     if applicable.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const { params, route } = this.findMatchingRoute({ url, request, event });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([\n                    `Found a route to handle this request:`, route,\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`, params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        if (!handler && this._defaultHandler) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler.`);\n            }\n            handler = this._defaultHandler;\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        if (responsePromise instanceof Promise && this._catchHandler) {\n            responsePromise = responsePromise.catch((err) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Still include URL here as it will be async from the console group\n                    // and may not make sense without the URL\n                    logger.groupCollapsed(`Error thrown when responding to: ` +\n                        ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\n                    logger.error(`Error thrown by:`, route);\n                    logger.error(err);\n                    logger.groupEnd();\n                }\n                return this._catchHandler.handle({ url, request, event });\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request The request to match.\n     * @param {Event} [options.event] The corresponding event (unless N/A).\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(url, URL, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.url',\n            });\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.request',\n            });\n        }\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            const matchResult = route.match({ url, request, event });\n            if (matchResult) {\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                params = matchResult;\n                if (Array.isArray(matchResult) && matchResult.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if ((matchResult.constructor === Object &&\n                    Object.keys(matchResult).length === 0)) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setDefaultHandler(handler) {\n        this._defaultHandler = normalizeHandler(handler);\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {module:workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {module:workbox-routing.Route} The generated `Route`(Useful for\n * unregistering).\n *\n * @memberof module:workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http') ?\n                captureUrl.pathname : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if ((new RegExp(`${wildcards}`)).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if ((url.pathname === captureUrl.pathname) &&\n                    (url.origin !== captureUrl.origin)) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        if (options.plugins) {\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n            this._plugins = isUsingCacheWillUpdate ?\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n        }\n        else {\n            // No plugins passed in, use the default plugin.\n            this._plugins = [cacheOkAndOpaquePlugin];\n        }\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'StaleWhileRevalidate',\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = this._getFromNetwork({ request, event });\n        let response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this._cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n            if (event) {\n                try {\n                    event.waitUntil(fetchAndCachePromise);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\n                    }\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                response = await fetchAndCachePromise;\n            }\n            catch (err) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('StaleWhileRevalidate', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getFromNetwork({ request, event }) {\n        const response = await fetchWrapper.fetch({\n            request,\n            event,\n            fetchOptions: this._fetchOptions,\n            plugins: this._plugins,\n        });\n        const cachePutPromise = cacheWrapper.put({\n            cacheName: this._cacheName,\n            request,\n            response: response.clone(),\n            event,\n            plugins: this._plugins,\n        });\n        if (event) {\n            try {\n                event.waitUntil(cachePutPromise);\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n","const Constants = {\n    indexedDBHost: 'indexdb.com',\n    famousJuans: [\n        { title: '般若波羅蜜多心經', url: `/catalog/juan/T0251/1` },\n        { title: '金剛般若波羅蜜經', url: `/catalog/juan/T0235/1` },\n        { title: '佛說阿彌陀經', url: `/catalog/juan/T0366/1` },\n        { title: '佛說無量壽經卷上', url: `/catalog/juan/T0360/1` },\n        { title: '佛說觀無量壽佛經', url: `/catalog/juan/T0365/1` },\n        { title: '藥師琉璃光如來本願功德經', url: `/catalog/juan/T0450/1` },\n        { title: '佛說觀彌勒菩薩上生兜率天經', url: `/catalog/juan/T0452/1` },\n        { title: '佛說彌勒下生成佛經', url: `/catalog/juan/T0454/1` },\n        { title: '地藏菩薩本願經', url: `/catalog/juan/T0412/1` },\n        { title: '妙法蓮華經觀世音菩薩普門品經', url: `/catalog/juan/T0262/7` },\n        { title: '大佛頂如來密因修證了義諸菩薩萬行首楞嚴經卷第一', url: `/catalog/juan/T0945/1` },\n        { title: '佛說法滅盡經', url: `/catalog/juan/T0396/1` },\n    ],\n};\n\nexport default Constants;\n","const cbetardb = 'cbetardb';\n// Increase this if a new store is added.\nconst version = 3;\nconst dataStore = 'store';\n// Increase this if font store content is changed.\nconst twKaiFontVersion = 5;\nconst fontStore = 'font';\nconst storeNames = [dataStore, fontStore];\nlet dbOpenReq: IDBOpenDBRequest;\nlet db: IDBDatabase;\nlet dbIsReady = false;\n\nasync function ready() {\n  if (dbIsReady) {\n    return;\n  }\n\n  return new Promise<void>(ok => {\n    const timer = setInterval(() => {\n      if (dbIsReady) {\n        clearInterval(timer);\n        ok();\n      }\n    }, 20);\n  });\n}\n\nasync function open() {\n  if (dbIsReady) {\n    return;\n  }\n\n  return new Promise<void>((ok, fail) => {\n    dbOpenReq = indexedDB.open(cbetardb, version);\n\n    // Init store in indexedDB if necessary.\n    dbOpenReq.onupgradeneeded = async (ev: IDBVersionChangeEvent) => {\n      db = (ev.target as any).result as IDBDatabase;\n\n      let objectStore: IDBObjectStore | undefined;\n      for (let i = 0; i < storeNames.length; i++) {\n        const s = storeNames[i];\n        if (db.objectStoreNames.contains(s)) {\n          continue;\n        }\n\n        objectStore = db.createObjectStore(s);\n      }\n\n      await new Promise<void>((ok, fail) => {\n        if (!objectStore) {\n          ok();\n          return;\n        }\n\n        objectStore.transaction.oncomplete = () => {\n          ok();\n        };\n        objectStore.transaction.onerror = (ev) => {\n          fail(`createObjectStore error: ${(ev.target as any).error}`);\n        };\n      });\n\n      dbIsReady = true;\n      console.log(`IndexedDB upgraded to version: ${version}`);\n    };\n\n    dbOpenReq.onsuccess = (ev: Event) => {\n      db = (ev.target as any).result as IDBDatabase;\n      if (db.version === version) {\n        dbIsReady = true;\n      }\n      ok();\n      console.log(`IndexedDB opened successfully.`);\n    };\n\n    dbOpenReq.onerror = (ev: Event) => {\n      fail('Fail to create IndexedDB.');\n    };\n  });\n}\n\nasync function clear() {\n  for (let i = 0; i < storeNames.length; i++) {\n    await clearStore(storeNames[i]);\n  }\n}\n\nasync function clearStore(store: string) {\n  return new Promise<void>((ok, fail) => {\n    const transWrite = db.transaction([store], 'readwrite')\n    const reqWrite = transWrite.objectStore(store).clear();\n    reqWrite.onsuccess = (_ev: any) => ok();\n    reqWrite.onerror = (_ev: any) => fail(`Clear IndexedDB failed: ${(_ev.target as any).error}`);\n  });\n}\n\nasync function saveFile(fileName: string, data: any, store: string = dataStore) {\n  await ready();\n\n  return new Promise<void>((ok, fail) => {\n    try {\n      const transWrite = db.transaction([store], 'readwrite')\n      const reqWrite = transWrite.objectStore(store).put(data, fileName);\n      reqWrite.onsuccess = (_ev: any) => ok();\n      reqWrite.onerror = (_ev: Event) => fail(`File ${fileName} saving failed: ${(_ev.target as any).error}`);\n    } catch (err) {\n      fail(err);\n    }\n  });\n}\n\nasync function removeFile(fileName: string, store: string = dataStore) {\n  await ready();\n\n  return new Promise<void>((ok, fail) => {\n    try {\n      const transWrite = db.transaction([store], 'readwrite');\n      const reqWrite = transWrite.objectStore(store).delete(fileName);\n      reqWrite.onsuccess = (_ev: any) => ok();\n      reqWrite.onerror = (_ev: any) => fail(`File ${fileName} removing failed: ${(_ev.target as any).error}`);\n    } catch (err) {\n      fail(err);\n    }\n  });\n}\n\nasync function checkKey(key: string, store: string = dataStore) {\n  await ready();\n\n  return new Promise(function (ok, fail) {\n    try {\n      const trans = db.transaction([store], 'readonly');\n      let req = trans.objectStore(store).getKey(key);\n      req.onsuccess = async function (_ev) {\n        const data = req.result;\n        if (!data) {\n          return fail(`Key ${key} not found in IndexedDB`);\n        }\n        return ok(data);\n      };\n    } catch (err) {\n      fail(err);\n    }\n  });\n}\n\nasync function getFile<T>(fileName: string, store: string = dataStore): Promise<T> {\n  await ready();\n\n  return new Promise(function (ok, fail) {\n    try {\n      const trans = db.transaction([store], 'readwrite');\n      let req = trans.objectStore(store).get(fileName);\n      req.onsuccess = async function (_ev) {\n        const data = req.result;\n        if (!data) {\n          return fail(`File ${fileName} not found in IndexedDB.`);\n        }\n        return ok(data as T);\n      };\n    } catch (err) {\n      fail(err);\n    }\n  });\n}\n\nconst IndexedDbFuncs = {\n  cbetardb,\n  dataStore,\n  twKaiFontVersion,\n  fontStore,\n  open,\n  clear,\n  clearStore,\n  saveFile,\n  removeFile,\n  getFile,\n  checkKey,\n}\n\nexport default IndexedDbFuncs;\n","/// <reference lib=\"webworker\" />\n/* eslint-disable no-restricted-globals */\n\n// This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules\n// for the list of available Workbox modules, or add any other\n// code you'd like.\n// You can also remove this file if you'd prefer not to use a\n// service worker, and the Workbox build step will be skipped.\n\nimport { clientsClaim } from 'workbox-core';\nimport { ExpirationPlugin } from 'workbox-expiration';\nimport { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';\nimport { registerRoute } from 'workbox-routing';\nimport { StaleWhileRevalidate } from 'workbox-strategies';\nimport Constants from './Constants';\nimport IndexedDbFuncs from './IndexedDbFuncs';\nimport VirtualHtml from './models/VirtualHtml';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nIndexedDbFuncs.open().then(() => {\n  console.log('SW IndexedDB opened!');\n}).catch((error) => {\n  console.log('SW IndexedDB failed!');\n});\n\nclientsClaim();\n\n// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST);\n\n// Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\nregisterRoute(\n  // Return false to exempt requests from being fulfilled by index.html.\n  ({ request, url }: { request: Request; url: URL }) => {\n    // If this isn't a navigation, skip.\n    if (request.mode !== 'navigate') {\n      return false;\n    }\n\n    // If this is a URL that starts with /_, skip.\n    if (url.pathname.startsWith('/_')) {\n      return false;\n    }\n\n    // If this looks like a URL for a resource, because it contains\n    // a file extension, skip.\n    if (url.pathname.match(fileExtensionRegexp)) {\n      return false;\n    }\n\n    // Return true to signal that we want to use the handler.\n    return true;\n  },\n  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')\n);\n\n// An example runtime caching route for requests that aren't handled by the\n// precache, in this case same-origin .png requests like those from in public/\nregisterRoute(\n  // Add in any other file extensions or routing criteria as needed.\n  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),\n  // Customize this strategy as needed, e.g., by changing to CacheFirst.\n  new StaleWhileRevalidate({\n    cacheName: 'images',\n    plugins: [\n      // Ensure that once this runtime cache reaches a maximum size the\n      // least-recently used images are removed.\n      new ExpirationPlugin({ maxEntries: 50 }),\n    ],\n  })\n);\n\nconst virtualHtmls: VirtualHtml[] = [];\n// This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\nself.addEventListener('message', (event) => {\n  if (event.data) {\n    switch (event.data.type) {\n      case 'SKIP_WAITING':\n        self.skipWaiting();\n        break;\n      case 'VIRTUAL_HTML':\n        // Transfer HTML contents for iframe from window.\n        virtualHtmls.push({\n          pathname: event.data.pathname,\n          html: event.data.html,\n        });\n        event.ports[0].postMessage({ type: 'VIRTUAL_HTML', pathname: event.data.pathname })\n        break;\n    }\n  }\n});\n\n// Any other custom service worker logic can go here.\n\n// Response a virtual HTML file to iframes with the same origin as window, so that iframes can inherit service worker from window.\nregisterRoute(({ url }) => {\n  if (url.origin === self.location.origin && virtualHtmls.some((v) => v.pathname === url.pathname)) {\n    return true;\n  }\n  return false;\n}, async ({ url }) => {\n  const dataIndex = virtualHtmls.findIndex(v => v.pathname === url?.pathname);\n  const data = virtualHtmls.splice(dataIndex, 1)[0];\n  const headers = new Headers({\n    'Content-Type': 'text/html'\n  });\n  return new Response(data.html, {\n    headers\n  });\n});\n\nregisterRoute((opts) => {\n  if (opts.url.host === Constants.indexedDBHost) {\n    return true;\n  }\n  return false;\n}, async ({ url }) => {\n  // Image is uncompressed.\n  const imgData = await IndexedDbFuncs.getFile(url?.pathname || '') as Uint8Array;\n  return new Response(imgData);\n});"]}